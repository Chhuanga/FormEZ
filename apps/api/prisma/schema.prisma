generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  email              String               @unique
  image              String?
  name               String?
  emailVerified      DateTime?
  accounts           Account[]
  forms              Form[]
  IntegrationAccount IntegrationAccount[]
  Session            Session[]
}

model Form {
  id                     String           @id @default(cuid())
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  title                  String
  userId                 String?
  fields                 Json
  theme                  Json             @default("{}")
  postSubmissionSettings Json             @default("{\"type\": \"message\", \"message\": \"Thanks for your submission!\"}")
  formSettings           Json             @default("{}")
  user                   User?            @relation(fields: [userId], references: [id])
  submissions            FormSubmission[]
  views                  FormView[]
  integrations           Integration[]
}

model FormView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  formId    String
  form      Form     @relation(fields: [formId], references: [id])
}

model FormSubmission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  formId    String
  answers   Answer[]
  form      Form     @relation(fields: [formId], references: [id])
}

model Answer {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  fieldId      String
  value        Json
  submissionId String
  submission   FormSubmission @relation(fields: [submissionId], references: [id])
  file         File?
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  filename  String
  mimetype  String
  size      Int
  path      String
  answerId  String   @unique
  answer    Answer   @relation(fields: [answerId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  scope             String?
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  providerAccountId String
  refresh_token     String?
  session_state     String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Integration {
  id        String             @id @default(cuid())
  type      String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  formId    String
  accountId String
  config    Json
  account   IntegrationAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  form      Form               @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([formId, type, accountId])
}

model IntegrationAccount {
  id           String        @id
  userId       String
  type         String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  scope        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  integrations Integration[]
  User         User          @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
