generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  forms        Form[]
  accounts     Account[]
  sessions     Session[]
  integrations IntegrationAccount[]
}

model Form {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  title     String
  fields    Json
  theme     Json        @default("{}")
  formSettings Json     @default("{}")
  postSubmissionSettings Json @default("{\"type\":\"message\",\"message\":\"Thanks for your submission!\"}")

  userId String?
  user   User?    @relation(fields: [userId], references: [id])
  submissions FormSubmission[]
  views       FormView[]
  integrations Integration[]
}

model FormView {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  form   Form   @relation(fields: [formId], references: [id])
  formId String
}

model FormSubmission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  answers Answer[]
}

model Answer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fieldId String // Corresponds to the 'id' of a field in the Form's 'fields' JSON
  value   Json

  submission   FormSubmission @relation(fields: [submissionId], references: [id])
  submissionId String

  file   File?
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  filename  String
  mimetype  String
  size      Int
  path      String

  answer   Answer @relation(fields: [answerId], references: [id])
  answerId String @unique
}

// Authentication Models (NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Integration Models
model IntegrationAccount {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  type         String // e.g., 'MAILCHIMP', 'GOOGLE'
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  scope        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  integrations Integration[]

  @@unique([userId, type])
}

model Integration {
  id        String   @id @default(cuid())
  type      String // e.g., 'MAILCHIMP', 'ZAPIER'
  formId    String
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  accountId String
  account   IntegrationAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  config    Json // Store API keys, list IDs, etc.

  @@unique([formId, type, accountId])
}
